/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulator;

import javax.swing.JOptionPane;

/**
 *
 * @author RISHAV
 */
public class SimulatorUI extends javax.swing.JFrame {

    /**
     * Creates new form SimulatorUI
     */
    public SimulatorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        testing = new javax.swing.JButton();
        HeadSim = new javax.swing.JLabel();
        cpuCombo = new javax.swing.JComboBox<>();
        diskCombo = new javax.swing.JComboBox<>();
        pageCombo = new javax.swing.JComboBox<>();
        cpuRB = new javax.swing.JRadioButton();
        pageRB = new javax.swing.JRadioButton();
        diskRB = new javax.swing.JRadioButton();
        exit = new javax.swing.JButton();
        clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        testing.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        testing.setText("Run Testing");
        testing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingActionPerformed(evt);
            }
        });

        HeadSim.setBackground(new java.awt.Color(0, 0, 0));
        HeadSim.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        HeadSim.setForeground(new java.awt.Color(51, 51, 51));
        HeadSim.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HeadSim.setText("Simulator");

        cpuCombo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cpuCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CPU Scheduling Algorithms", "First In First Out", "First Come First Serve", "Round Robin(Prioritized)", "Round Robin(Equal Time)", "Shortest Job First(Preemptive)", "Shortest Job First(Non-Preemptive)", "Priority Scheduler(Preemptive)", "Priority Scheduler(Non-Preemptive)", " " }));
        cpuCombo.setEnabled(false);
        cpuCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cpuComboItemStateChanged(evt);
            }
        });
        cpuCombo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                cpuComboMouseMoved(evt);
            }
        });
        cpuCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cpuComboFocusLost(evt);
            }
        });

        diskCombo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        diskCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Disk Scheduling Algorithms", "Scan", "CScan", "CLook", "FCFS", "SSTF" }));
        diskCombo.setEnabled(false);
        diskCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diskComboActionPerformed(evt);
            }
        });

        pageCombo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pageCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Page Replacement Algorithms", "FIFO", "LRU", "OPT", "SCP" }));
        pageCombo.setEnabled(false);

        buttonGroup1.add(cpuRB);
        cpuRB.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        cpuRB.setText("CPU Scheduling");
        cpuRB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cpuRBItemStateChanged(evt);
            }
        });

        buttonGroup1.add(pageRB);
        pageRB.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        pageRB.setText("Page Replacement");
        pageRB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pageRBItemStateChanged(evt);
            }
        });

        buttonGroup1.add(diskRB);
        diskRB.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        diskRB.setText("Disk Scheduling");
        diskRB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                diskRBItemStateChanged(evt);
            }
        });

        exit.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        exit.setText("EXIT");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        clear.setText("CLEAR");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cpuRB)
                    .addComponent(cpuCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(testing, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(diskCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(68, 68, 68))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pageRB)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(HeadSim, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(diskRB, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(diskRB))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(HeadSim, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pageRB)
                            .addComponent(cpuRB))))
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diskCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpuCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testing, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void testingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingActionPerformed
        if(cpuRB.isSelected()==true)
        {
            int ind = cpuCombo.getSelectedIndex();
            CPUScheduler spr = new CPUScheduler(ind);
            spr.setVisible(true);
            setVisible(false);
        }
        else if(pageRB.isSelected()==true)
        {
            int ind = pageCombo.getSelectedIndex();
            PageScheduler pg = new PageScheduler(ind);
            pg.setVisible(true);
            setVisible(false);
        }
        else if(diskRB.isSelected()==true)
        {
            int ind = diskCombo.getSelectedIndex();
            DiskScheduler ds = new DiskScheduler(ind);
            ds.setVisible(true);
            setVisible(false);
        }
        // TODO add your handling code here:
        
    }//GEN-LAST:event_testingActionPerformed

    private void diskComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diskComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_diskComboActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);

        // TODO add your handling code here:
    }//GEN-LAST:event_exitActionPerformed

    private void cpuRBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cpuRBItemStateChanged
        cpuRB.addActionListener(new java.awt.event.ActionListener() {
            @Override
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if(cpuRB.isSelected()==true)
            {
                cpuCombo.setEnabled(true);
                pageCombo.setEnabled(false);
                diskCombo.setEnabled(false);
            }
                    
            
    }
       /* public void itemStateChanged(java.awt.event.ItemEvent e) {
    if (e.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
           cpuCombo.setEnabled(true);
    }
    else if (e.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
           cpuCombo.setEnabled(false);
    }
}*/
});

        // TODO add your handling code here:
    }//GEN-LAST:event_cpuRBItemStateChanged

    private void cpuComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cpuComboItemStateChanged
// TODO add your handling code here:
    }//GEN-LAST:event_cpuComboItemStateChanged

    private void pageRBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pageRBItemStateChanged
pageRB.addActionListener(new java.awt.event.ActionListener() {
            @Override
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if(pageRB.isSelected()==true)
            {
                pageCombo.setEnabled(true);
                cpuCombo.setEnabled(false);
                diskCombo.setEnabled(false);
            }
                    
            
    }
       /* public void itemStateChanged(java.awt.event.ItemEvent e) {
    if (e.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
           cpuCombo.setEnabled(true);
    }
    else if (e.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
           cpuCombo.setEnabled(false);
    }
}*/
});
        // TODO add your handling code here:
    }//GEN-LAST:event_pageRBItemStateChanged

    private void diskRBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_diskRBItemStateChanged
diskRB.addActionListener(new java.awt.event.ActionListener() {
            @Override
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if(diskRB.isSelected()==true)
            {
                diskCombo.setEnabled(true);
                pageCombo.setEnabled(false);
                cpuCombo.setEnabled(false);
            }  
    }
});
        // TODO add your handling code here:
    }//GEN-LAST:event_diskRBItemStateChanged

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        cpuCombo.setEnabled(false);
        pageCombo.setEnabled(false);
        diskCombo.setEnabled(false);
        buttonGroup1.clearSelection();
        
        // TODO add your handling code here:
    }//GEN-LAST:event_clearActionPerformed

    private void cpuComboMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cpuComboMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_cpuComboMouseMoved

    private void cpuComboFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cpuComboFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_cpuComboFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulatorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HeadSim;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clear;
    private javax.swing.JComboBox<String> cpuCombo;
    private javax.swing.JRadioButton cpuRB;
    private javax.swing.JComboBox<String> diskCombo;
    private javax.swing.JRadioButton diskRB;
    private javax.swing.JButton exit;
    private javax.swing.JComboBox<String> pageCombo;
    private javax.swing.JRadioButton pageRB;
    private javax.swing.JButton testing;
    // End of variables declaration//GEN-END:variables
}
